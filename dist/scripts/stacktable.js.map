{"version":3,"sources":["../bower_components/stacktable.js/stacktable.js"],"names":["$","fn","cardtable","options","headIndex","$tables","this","defaults","settings","extend","each","$table","hasClass","table_css","prop","$stacktable","myClass","addClass","$caption","$topRow","headMarkup","bodyMarkup","tr_class","markup","find","clone","eq","cellIndex","html","rowIndex","value","trim","text","prepend","append","before","stacktable","stackcolumns","num_cols","length","$stackcolumns","tb","col_i","index","tem","first","target","i","cs","attr","parseInt","second","removeAttr","jQuery"],"mappings":"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","file":"stacktable.js","sourcesContent":["/**\n * stacktable.js\n * Author & copyright (c) 2012: John Polacek\n * CardTable by: Justin McNally (2015)\n * Dual MIT & GPL license\n *\n * Page: http://johnpolacek.github.com/stacktable.js\n * Repo: https://github.com/johnpolacek/stacktable.js/\n *\n * jQuery plugin for stacking tables on small screens\n * Requires jQuery version 1.7 or above\n *\n */\n;(function($) {\n  $.fn.cardtable = function(options) {\n    var $tables = this,\n        defaults = {headIndex:0},\n        settings = $.extend({}, defaults, options),\n        headIndex;\n\n    // checking the \"headIndex\" option presence... or defaults it to 0\n    if(options && options.headIndex)\n      headIndex = options.headIndex;\n    else\n      headIndex = 0;\n\n    return $tables.each(function() {\n      var $table = $(this);\n      if ($table.hasClass('stacktable')) {\n        return;\n      }\n      var table_css = $(this).prop('class');\n      var $stacktable = $('<div></div>');\n      if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass);\n      var markup = '';\n      var $caption, $topRow, headMarkup, bodyMarkup, tr_class;\n\n      $table.addClass('stacktable large-only');\n      $caption = $table.find(\"caption\").clone();\n      $topRow = $table.find('tr').eq(0);\n\n      // using rowIndex and cellIndex in order to reduce ambiguity\n      $table.find('tbody tr').each(function() {\n\n        // declaring headMarkup and bodyMarkup, to be used for separately head and body of single records\n        headMarkup = '';\n        bodyMarkup = '';\n        tr_class = $(this).prop('class');\n        // for the first row, \"headIndex\" cell is the head of the table\n        // for the other rows, put the \"headIndex\" cell as the head for that row\n        // then iterate through the key/values\n        $(this).find('td,th').each(function(cellIndex) {\n          if ($(this).html() !== ''){\n            bodyMarkup += '<tr class=\"' + tr_class +'\">';\n            if ($topRow.find('td,th').eq(cellIndex).html()){\n              bodyMarkup += '<td class=\"st-key\">'+$topRow.find('td,th').eq(cellIndex).html()+'</td>';\n            } else {\n              bodyMarkup += '<td class=\"st-key\"></td>';\n            }\n            bodyMarkup += '<td class=\"st-val '+$(this).prop('class')  +'\">'+$(this).html()+'</td>';\n            bodyMarkup += '</tr>';\n          }\n        });\n\n        markup += '<table class=\" '+ table_css +' stacktable small-only\"><tbody>' + headMarkup + bodyMarkup + '</tbody></table>';\n      });\n\n      $table.find('tfoot tr td').each(function(rowIndex,value) {\n        if ($.trim($(value).text()) !== '') {\n          markup += '<table class=\"'+ table_css + ' stacktable small-only\"><tbody><tr><td>' + $(value).html() + '</td></tr></tbody></table>';\n        }\n      });\n\n      $stacktable.prepend($caption);\n      $stacktable.append($(markup));\n      $table.before($stacktable);\n    });\n  };\n\n  $.fn.stacktable = function(options) {\n    var $tables = this,\n        defaults = {headIndex:0},\n        settings = $.extend({}, defaults, options),\n        headIndex;\n\n    // checking the \"headIndex\" option presence... or defaults it to 0\n    if(options && options.headIndex)\n      headIndex = options.headIndex;\n    else\n      headIndex = 0;\n\n    return $tables.each(function() {\n      var table_css = $(this).prop('class');\n      var $stacktable = $('<table class=\"'+ table_css +' stacktable small-only\"><tbody></tbody></table>');\n      if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass);\n      var markup = '';\n      var $table, $caption, $topRow, headMarkup, bodyMarkup, tr_class;\n\n      $table = $(this);\n      $table.addClass('stacktable large-only');\n      $caption = $table.find(\"caption\").clone();\n      $topRow = $table.find('tr').eq(0);\n\n      // using rowIndex and cellIndex in order to reduce ambiguity\n      $table.find('tr').each(function(rowIndex) {\n\n        // declaring headMarkup and bodyMarkup, to be used for separately head and body of single records\n        headMarkup = '';\n        bodyMarkup = '';\n        tr_class = $(this).prop('class');\n        // for the first row, \"headIndex\" cell is the head of the table\n        if (rowIndex === 0) {\n          // the main heading goes into the markup variable\n          markup += '<tr class=\" '+tr_class +' \"><th class=\"st-head-row st-head-row-main\" colspan=\"2\">'+$(this).find('th,td').eq(headIndex).html()+'</th></tr>';\n        }\n        else {\n          // for the other rows, put the \"headIndex\" cell as the head for that row\n          // then iterate through the key/values\n          $(this).find('td,th').each(function(cellIndex) {\n            if (cellIndex === headIndex) {\n              headMarkup = '<tr class=\"'+ tr_class+'\"><th class=\"st-head-row\" colspan=\"2\">'+$(this).html()+'</th></tr>';\n            } else {\n              if ($(this).html() !== ''){\n                bodyMarkup += '<tr class=\"' + tr_class +'\">';\n                if ($topRow.find('td,th').eq(cellIndex).html()){\n                  bodyMarkup += '<td class=\"st-key\">'+$topRow.find('td,th').eq(cellIndex).html()+'</td>';\n                } else {\n                  bodyMarkup += '<td class=\"st-key\"></td>';\n                }\n                bodyMarkup += '<td class=\"st-val '+$(this).prop('class')  +'\">'+$(this).html()+'</td>';\n                bodyMarkup += '</tr>';\n              }\n            }\n          });\n\n          markup += headMarkup + bodyMarkup;\n        }\n      });\n\n      $stacktable.prepend($caption);\n      $stacktable.append($(markup));\n      $table.before($stacktable);\n    });\n  };\n\n $.fn.stackcolumns = function(options) {\n    var $tables = this,\n        defaults = {},\n        settings = $.extend({}, defaults, options);\n\n    return $tables.each(function() {\n      var $table = $(this);\n      var num_cols = $table.find('tr').eq(0).find('td,th').length; //first table <tr> must not contain colspans, or add sum(colspan-1) here.\n      if(num_cols<3) //stackcolumns has no effect on tables with less than 3 columns\n        return;\n\n      var $stackcolumns = $('<table class=\"stacktable small-only\"></table>');\n      if (typeof settings.myClass !== 'undefined') $stackcolumns.addClass(settings.myClass);\n      $table.addClass('stacktable large-only');\n      var tb = $('<tbody></tbody>');\n      var col_i = 1; //col index starts at 0 -> start copy at second column.\n\n      while (col_i < num_cols) {\n        $table.find('tr').each(function(index) {\n          var tem = $('<tr></tr>'); // todo opt. copy styles of $this; todo check if parent is thead or tfoot to handle accordingly\n          if(index === 0) tem.addClass(\"st-head-row st-head-row-main\");\n          var first = $(this).find('td,th').eq(0).clone().addClass(\"st-key\");\n          var target = col_i;\n          // if colspan apply, recompute target for second cell.\n          if ($(this).find(\"*[colspan]\").length) {\n            var i =0;\n            $(this).find('td,th').each(function() {\n                var cs = $(this).attr(\"colspan\");\n                if (cs) {\n                  cs = parseInt(cs, 10);\n                  target -= cs-1;\n                  if ((i+cs) > (col_i)) //out of current bounds\n                    target += i + cs - col_i -1;\n                  i += cs;\n                }\n                else\n                  i++;\n\n                if (i > col_i)\n                  return false; //target is set; break.\n            });\n          }\n          var second = $(this).find('td,th').eq(target).clone().addClass(\"st-val\").removeAttr(\"colspan\");\n          tem.append(first, second);\n          tb.append(tem);\n        });\n        ++col_i;\n      }\n\n      $stackcolumns.append($(tb));\n      $table.before($stackcolumns);\n    });\n  };\n\n}(jQuery));\n"],"sourceRoot":"assets/scripts/"}